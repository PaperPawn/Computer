import pytest

from computer.chips.logic_gates_multi_way import OR8WAY, MUX4WAY16, MUX8WAY16, DMUX4WAY, DMUX8WAY


class TestOr8Way:
    truth_table = [([0]*8, 0),
                   ([1]*8, 1),
                   ([0, 0, 0, 0, 0, 0, 0, 1], 1),
                   ([0, 0, 0, 0, 0, 0, 1, 0], 1),
                   ([0, 0, 0, 0, 0, 1, 0, 0], 1),
                   ([0, 0, 0, 0, 1, 0, 0, 0], 1),
                   ([0, 0, 0, 1, 0, 0, 0, 0], 1),
                   ([0, 0, 1, 0, 0, 0, 0, 0], 1),
                   ([0, 1, 0, 0, 0, 0, 0, 0], 1),
                   ([1, 0, 0, 0, 0, 0, 0, 0], 1)]

    @pytest.mark.parametrize('a, expected', truth_table)
    def test_or8way(self, a, expected):
        assert OR8WAY(a) == expected


class TestMux4Way16:
    truth_table = [([0]*16, [0]*16, [0]*16, [0]*16, [0, 0], [0]*16),
                   ([0]*16, [0]*16, [0]*16, [0]*16, [0, 1], [0]*16),
                   ([0]*16, [0]*16, [0]*16, [0]*16, [1, 0], [0]*16),
                   ([0]*16, [0]*16, [0]*16, [0]*16, [1, 1], [0]*16),
                   ([1]*16, [0]*16, [0]*16, [0]*16, [0, 0], [1]*16),
                   ([0]*16, [1]*16, [0]*16, [0]*16, [0, 1], [1]*16),
                   ([0]*16, [0]*16, [1]*16, [0]*16, [1, 0], [1]*16),
                   ([0]*16, [0]*16, [0]*16, [1]*16, [1, 1], [1]*16),
                   ([1]*16, [1, 0]*8, [1]*16, [1]*16, [0, 1], [1, 0]*8)]

    @pytest.mark.parametrize('a, b, c, d, sel, expected', truth_table)
    def test_mux4way16(self, a, b, c, d, sel, expected):
        assert MUX4WAY16(a, b, c, d, sel) == expected


class TestMux8Way16:
    truth_table = [([0]*16, [0]*16, [0]*16, [0]*16,
                    [0]*16, [0]*16, [0]*16, [0]*16, [0, 0, 0], [0]*16),
                   ([0] * 16, [0] * 16, [0] * 16, [0] * 16,
                    [0] * 16, [0] * 16, [0] * 16, [0] * 16, [0, 0, 1], [0] * 16),
                   ([0] * 16, [0] * 16, [0] * 16, [0] * 16,
                    [0] * 16, [0] * 16, [0] * 16, [0] * 16, [0, 1, 0], [0] * 16),
                   ([0] * 16, [0] * 16, [0] * 16, [0] * 16,
                    [0] * 16, [0] * 16, [0] * 16, [0] * 16, [0, 1, 1], [0] * 16),
                   ([0] * 16, [0] * 16, [0] * 16, [0] * 16,
                    [0] * 16, [0] * 16, [0] * 16, [0] * 16, [1, 0, 0], [0] * 16),
                   ([0] * 16, [0] * 16, [0] * 16, [0] * 16,
                    [0] * 16, [0] * 16, [0] * 16, [0] * 16, [1, 0, 1], [0] * 16),
                   ([0] * 16, [0] * 16, [0] * 16, [0] * 16,
                    [0] * 16, [0] * 16, [0] * 16, [0] * 16, [1, 1, 0], [0] * 16),
                   ([0] * 16, [0] * 16, [0] * 16, [0] * 16,
                    [0] * 16, [0] * 16, [0] * 16, [0] * 16, [1, 1, 1], [0] * 16),
                   ([1] * 16, [0] * 16, [0] * 16, [0] * 16,
                    [0] * 16, [0] * 16, [0] * 16, [0] * 16, [0, 0, 0], [1] * 16),
                   ([0] * 16, [1] * 16, [0] * 16, [0] * 16,
                    [0] * 16, [0] * 16, [0] * 16, [0] * 16, [0, 0, 1], [1] * 16),
                   ([0] * 16, [0] * 16, [1] * 16, [0] * 16,
                    [0] * 16, [0] * 16, [0] * 16, [0] * 16, [0, 1, 0], [1] * 16),
                   ([0] * 16, [0] * 16, [0] * 16, [1] * 16,
                    [0] * 16, [0] * 16, [0] * 16, [0] * 16, [0, 1, 1], [1] * 16),
                   ([0] * 16, [0] * 16, [0] * 16, [0] * 16,
                    [1] * 16, [0] * 16, [0] * 16, [0] * 16, [1, 0, 0], [1] * 16),
                   ([0] * 16, [0] * 16, [0] * 16, [0] * 16,
                    [0] * 16, [1] * 16, [0] * 16, [0] * 16, [1, 0, 1], [1] * 16),
                   ([0] * 16, [0] * 16, [0] * 16, [0] * 16,
                    [0] * 16, [0] * 16, [1] * 16, [0] * 16, [1, 1, 0], [1] * 16),
                   ([0] * 16, [0] * 16, [0] * 16, [0] * 16,
                    [0] * 16, [0] * 16, [0] * 16, [1] * 16, [1, 1, 1], [1] * 16),
                   ]

    @pytest.mark.parametrize('a, b, c, d, e, f, g, h, sel, expected', truth_table)
    def test_mux4way16(self, a, b, c, d, e, f, g, h, sel, expected):
        assert MUX8WAY16(a, b, c, d, e, f, g, h, sel) == expected


class TestDMux4Way:
    truth_table = [(0, [0, 0], 0, 0, 0, 0),
                   (0, [0, 1], 0, 0, 0, 0),
                   (0, [1, 0], 0, 0, 0, 0),
                   (0, [1, 1], 0, 0, 0, 0),
                   (1, [0, 0], 1, 0, 0, 0),
                   (1, [0, 1], 0, 1, 0, 0),
                   (1, [1, 0], 0, 0, 1, 0),
                   (1, [1, 1], 0, 0, 0, 1)
                   ]

    @pytest.mark.parametrize('a, sel, exp_1, exp_2, exp_3, exp_4', truth_table)
    def test_dmux4way(self, a, sel, exp_1, exp_2, exp_3, exp_4):
        assert DMUX4WAY(a, sel) == (exp_1, exp_2, exp_3, exp_4)


class TestDMux8Way:
    truth_table = [(0, [0, 0, 0], 0, 0, 0, 0, 0, 0, 0, 0),
                   (0, [0, 0, 1], 0, 0, 0, 0, 0, 0, 0, 0),
                   (0, [0, 1, 0], 0, 0, 0, 0, 0, 0, 0, 0),
                   (0, [0, 1, 1], 0, 0, 0, 0, 0, 0, 0, 0),

                   (0, [1, 0, 0], 0, 0, 0, 0, 0, 0, 0, 0),
                   (0, [1, 0, 1], 0, 0, 0, 0, 0, 0, 0, 0),
                   (0, [1, 1, 0], 0, 0, 0, 0, 0, 0, 0, 0),
                   (0, [1, 1, 1], 0, 0, 0, 0, 0, 0, 0, 0),

                   (1, [0, 0, 0], 1, 0, 0, 0, 0, 0, 0, 0),
                   (1, [0, 0, 1], 0, 1, 0, 0, 0, 0, 0, 0),
                   (1, [0, 1, 0], 0, 0, 1, 0, 0, 0, 0, 0),
                   (1, [0, 1, 1], 0, 0, 0, 1, 0, 0, 0, 0),

                   (1, [1, 0, 0], 0, 0, 0, 0, 1, 0, 0, 0),
                   (1, [1, 0, 1], 0, 0, 0, 0, 0, 1, 0, 0),
                   (1, [1, 1, 0], 0, 0, 0, 0, 0, 0, 1, 0),
                   (1, [1, 1, 1], 0, 0, 0, 0, 0, 0, 0, 1)
                   ]

    @pytest.mark.parametrize('a, sel, e1, e2, e3, e4, e5, e6, e7, e8', truth_table)
    def test_dmux8way(self, a, sel, e1, e2, e3, e4, e5, e6, e7, e8):
        assert DMUX8WAY(a, sel) == (e1, e2, e3, e4, e5, e6, e7, e8)